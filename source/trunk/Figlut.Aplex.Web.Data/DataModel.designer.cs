#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Figlut.Aplex.Web.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FiglutAplex")]
	public partial class DataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAplex(Aplex instance);
    partial void UpdateAplex(Aplex instance);
    partial void DeleteAplex(Aplex instance);
    partial void InsertUserPermission(UserPermission instance);
    partial void UpdateUserPermission(UserPermission instance);
    partial void DeleteUserPermission(UserPermission instance);
    partial void InsertAplexControlMapping(AplexControlMapping instance);
    partial void UpdateAplexControlMapping(AplexControlMapping instance);
    partial void DeleteAplexControlMapping(AplexControlMapping instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDeviceConfig(DeviceConfig instance);
    partial void UpdateDeviceConfig(DeviceConfig instance);
    partial void DeleteDeviceConfig(DeviceConfig instance);
    partial void InsertDeviceConfigAction(DeviceConfigAction instance);
    partial void UpdateDeviceConfigAction(DeviceConfigAction instance);
    partial void DeleteDeviceConfigAction(DeviceConfigAction instance);
    partial void InsertDeviceConfigAplex(DeviceConfigAplex instance);
    partial void UpdateDeviceConfigAplex(DeviceConfigAplex instance);
    partial void DeleteDeviceConfigAplex(DeviceConfigAplex instance);
    partial void InsertDevicePendingApproval(DevicePendingApproval instance);
    partial void UpdateDevicePendingApproval(DevicePendingApproval instance);
    partial void DeleteDevicePendingApproval(DevicePendingApproval instance);
    partial void InsertEmailAction(EmailAction instance);
    partial void UpdateEmailAction(EmailAction instance);
    partial void DeleteEmailAction(EmailAction instance);
    partial void InsertGlobalVariable(GlobalVariable instance);
    partial void UpdateGlobalVariable(GlobalVariable instance);
    partial void DeleteGlobalVariable(GlobalVariable instance);
    partial void InsertServerAction(ServerAction instance);
    partial void UpdateServerAction(ServerAction instance);
    partial void DeleteServerAction(ServerAction instance);
    partial void InsertServerError(ServerError instance);
    partial void UpdateServerError(ServerError instance);
    partial void DeleteServerError(ServerError instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAplexDatabase(AplexDatabase instance);
    partial void UpdateAplexDatabase(AplexDatabase instance);
    partial void DeleteAplexDatabase(AplexDatabase instance);
    partial void InsertAplexScreen(AplexScreen instance);
    partial void UpdateAplexScreen(AplexScreen instance);
    partial void DeleteAplexScreen(AplexScreen instance);
    partial void InsertAplexScreenField(AplexScreenField instance);
    partial void UpdateAplexScreenField(AplexScreenField instance);
    partial void DeleteAplexScreenField(AplexScreenField instance);
    partial void InsertAplexDataColumn(AplexDataColumn instance);
    partial void UpdateAplexDataColumn(AplexDataColumn instance);
    partial void DeleteAplexDataColumn(AplexDataColumn instance);
    partial void InsertAplexDataRow(AplexDataRow instance);
    partial void UpdateAplexDataRow(AplexDataRow instance);
    partial void DeleteAplexDataRow(AplexDataRow instance);
    partial void InsertAplexDataTable(AplexDataTable instance);
    partial void UpdateAplexDataTable(AplexDataTable instance);
    partial void DeleteAplexDataTable(AplexDataTable instance);
    partial void InsertAplexDataCell(AplexDataCell instance);
    partial void UpdateAplexDataCell(AplexDataCell instance);
    partial void DeleteAplexDataCell(AplexDataCell instance);
    #endregion
		
		public DataModelDataContext() : 
				base(global::Figlut.Aplex.Web.Data.Properties.Settings.Default.FiglutAplexConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Aplex> Aplexes
		{
			get
			{
				return this.GetTable<Aplex>();
			}
		}
		
		public System.Data.Linq.Table<UserPermission> UserPermissions
		{
			get
			{
				return this.GetTable<UserPermission>();
			}
		}
		
		public System.Data.Linq.Table<AplexControlMapping> AplexControlMappings
		{
			get
			{
				return this.GetTable<AplexControlMapping>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<DeviceConfig> DeviceConfigs
		{
			get
			{
				return this.GetTable<DeviceConfig>();
			}
		}
		
		public System.Data.Linq.Table<DeviceConfigAction> DeviceConfigActions
		{
			get
			{
				return this.GetTable<DeviceConfigAction>();
			}
		}
		
		public System.Data.Linq.Table<DeviceConfigAplex> DeviceConfigAplexes
		{
			get
			{
				return this.GetTable<DeviceConfigAplex>();
			}
		}
		
		public System.Data.Linq.Table<DevicePendingApproval> DevicePendingApprovals
		{
			get
			{
				return this.GetTable<DevicePendingApproval>();
			}
		}
		
		public System.Data.Linq.Table<EmailAction> EmailActions
		{
			get
			{
				return this.GetTable<EmailAction>();
			}
		}
		
		public System.Data.Linq.Table<GlobalVariable> GlobalVariables
		{
			get
			{
				return this.GetTable<GlobalVariable>();
			}
		}
		
		public System.Data.Linq.Table<ServerAction> ServerActions
		{
			get
			{
				return this.GetTable<ServerAction>();
			}
		}
		
		public System.Data.Linq.Table<ServerError> ServerErrors
		{
			get
			{
				return this.GetTable<ServerError>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<AplexDatabase> AplexDatabases
		{
			get
			{
				return this.GetTable<AplexDatabase>();
			}
		}
		
		public System.Data.Linq.Table<AplexScreen> AplexScreens
		{
			get
			{
				return this.GetTable<AplexScreen>();
			}
		}
		
		public System.Data.Linq.Table<AplexScreenField> AplexScreenFields
		{
			get
			{
				return this.GetTable<AplexScreenField>();
			}
		}
		
		public System.Data.Linq.Table<AplexDataColumn> AplexDataColumns
		{
			get
			{
				return this.GetTable<AplexDataColumn>();
			}
		}
		
		public System.Data.Linq.Table<AplexDataRow> AplexDataRows
		{
			get
			{
				return this.GetTable<AplexDataRow>();
			}
		}
		
		public System.Data.Linq.Table<AplexDataTable> AplexDataTables
		{
			get
			{
				return this.GetTable<AplexDataTable>();
			}
		}
		
		public System.Data.Linq.Table<AplexDataCell> AplexDataCells
		{
			get
			{
				return this.GetTable<AplexDataCell>();
			}
		}
	}
	
	[Table(Name="dbo.Aplex")]
	public partial class Aplex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AplexId;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private string _Description;
		
		private EntitySet<DeviceConfigAplex> _DeviceConfigAplexes;
		
		private EntitySet<AplexScreen> _AplexScreens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAplexIdChanging(System.Guid value);
    partial void OnAplexIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Aplex()
		{
			this._DeviceConfigAplexes = new EntitySet<DeviceConfigAplex>(new Action<DeviceConfigAplex>(this.attach_DeviceConfigAplexes), new Action<DeviceConfigAplex>(this.detach_DeviceConfigAplexes));
			this._AplexScreens = new EntitySet<AplexScreen>(new Action<AplexScreen>(this.attach_AplexScreens), new Action<AplexScreen>(this.detach_AplexScreens));
			OnCreated();
		}
		
		[Column(Storage="_AplexId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AplexId
		{
			get
			{
				return this._AplexId;
			}
			set
			{
				if ((this._AplexId != value))
				{
					this.OnAplexIdChanging(value);
					this.SendPropertyChanging();
					this._AplexId = value;
					this.SendPropertyChanged("AplexId");
					this.OnAplexIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Aplex_DeviceConfigAplex", Storage="_DeviceConfigAplexes", ThisKey="AplexId", OtherKey="AplexId")]
		public EntitySet<DeviceConfigAplex> DeviceConfigAplexes
		{
			get
			{
				return this._DeviceConfigAplexes;
			}
			set
			{
				this._DeviceConfigAplexes.Assign(value);
			}
		}
		
		[Association(Name="Aplex_AplexScreen", Storage="_AplexScreens", ThisKey="AplexId", OtherKey="AplexId")]
		public EntitySet<AplexScreen> AplexScreens
		{
			get
			{
				return this._AplexScreens;
			}
			set
			{
				this._AplexScreens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceConfigAplexes(DeviceConfigAplex entity)
		{
			this.SendPropertyChanging();
			entity.Aplex = this;
		}
		
		private void detach_DeviceConfigAplexes(DeviceConfigAplex entity)
		{
			this.SendPropertyChanging();
			entity.Aplex = null;
		}
		
		private void attach_AplexScreens(AplexScreen entity)
		{
			this.SendPropertyChanging();
			entity.Aplex = this;
		}
		
		private void detach_AplexScreens(AplexScreen entity)
		{
			this.SendPropertyChanging();
			entity.Aplex = null;
		}
	}
	
	[Table(Name="dbo.UserPermission")]
	public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserPermissionId;
		
		private string _PermissionName;
		
		private System.Guid _UserId;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserPermissionIdChanging(System.Guid value);
    partial void OnUserPermissionIdChanged();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public UserPermission()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserPermissionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserPermissionId
		{
			get
			{
				return this._UserPermissionId;
			}
			set
			{
				if ((this._UserPermissionId != value))
				{
					this.OnUserPermissionIdChanging(value);
					this.SendPropertyChanging();
					this._UserPermissionId = value;
					this.SendPropertyChanged("UserPermissionId");
					this.OnUserPermissionIdChanged();
				}
			}
		}
		
		[Column(Storage="_PermissionName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string PermissionName
		{
			get
			{
				return this._PermissionName;
			}
			set
			{
				if ((this._PermissionName != value))
				{
					this.OnPermissionNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionName = value;
					this.SendPropertyChanged("PermissionName");
					this.OnPermissionNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="User_UserPermission", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AplexControlMapping")]
	public partial class AplexControlMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StateControlMappingId;
		
		private string _BaseTypeName;
		
		private string _ControlTypeName;
		
		private System.DateTime _DateCreated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateControlMappingIdChanging(System.Guid value);
    partial void OnStateControlMappingIdChanged();
    partial void OnBaseTypeNameChanging(string value);
    partial void OnBaseTypeNameChanged();
    partial void OnControlTypeNameChanging(string value);
    partial void OnControlTypeNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AplexControlMapping()
		{
			OnCreated();
		}
		
		[Column(Storage="_StateControlMappingId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StateControlMappingId
		{
			get
			{
				return this._StateControlMappingId;
			}
			set
			{
				if ((this._StateControlMappingId != value))
				{
					this.OnStateControlMappingIdChanging(value);
					this.SendPropertyChanging();
					this._StateControlMappingId = value;
					this.SendPropertyChanged("StateControlMappingId");
					this.OnStateControlMappingIdChanged();
				}
			}
		}
		
		[Column(Storage="_BaseTypeName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string BaseTypeName
		{
			get
			{
				return this._BaseTypeName;
			}
			set
			{
				if ((this._BaseTypeName != value))
				{
					this.OnBaseTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BaseTypeName = value;
					this.SendPropertyChanged("BaseTypeName");
					this.OnBaseTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_ControlTypeName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string ControlTypeName
		{
			get
			{
				return this._ControlTypeName;
			}
			set
			{
				if ((this._ControlTypeName != value))
				{
					this.OnControlTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ControlTypeName = value;
					this.SendPropertyChanged("ControlTypeName");
					this.OnControlTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CustomerId;
		
		private string _CompanyName;
		
		private string _PhysicalAddress;
		
		private string _PostalAddress;
		
		private string _ContactName;
		
		private string _ContactNumber;
		
		private string _ContactEmail;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<DeviceConfig> _DeviceConfigs;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(System.Guid value);
    partial void OnCustomerIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnPhysicalAddressChanging(string value);
    partial void OnPhysicalAddressChanged();
    partial void OnPostalAddressChanging(string value);
    partial void OnPostalAddressChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Customer()
		{
			this._DeviceConfigs = new EntitySet<DeviceConfig>(new Action<DeviceConfig>(this.attach_DeviceConfigs), new Action<DeviceConfig>(this.detach_DeviceConfigs));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[Column(Storage="_CustomerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_PhysicalAddress", DbType="VarChar(MAX)")]
		public string PhysicalAddress
		{
			get
			{
				return this._PhysicalAddress;
			}
			set
			{
				if ((this._PhysicalAddress != value))
				{
					this.OnPhysicalAddressChanging(value);
					this.SendPropertyChanging();
					this._PhysicalAddress = value;
					this.SendPropertyChanged("PhysicalAddress");
					this.OnPhysicalAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PostalAddress", DbType="VarChar(MAX)")]
		public string PostalAddress
		{
			get
			{
				return this._PostalAddress;
			}
			set
			{
				if ((this._PostalAddress != value))
				{
					this.OnPostalAddressChanging(value);
					this.SendPropertyChanging();
					this._PostalAddress = value;
					this.SendPropertyChanged("PostalAddress");
					this.OnPostalAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="VarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContactNumber", DbType="VarChar(50)")]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ContactEmail", DbType="VarChar(100)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="Customer_DeviceConfig", Storage="_DeviceConfigs", ThisKey="CustomerId", OtherKey="CustomerId")]
		public EntitySet<DeviceConfig> DeviceConfigs
		{
			get
			{
				return this._DeviceConfigs;
			}
			set
			{
				this._DeviceConfigs.Assign(value);
			}
		}
		
		[Association(Name="Customer_User", Storage="_Users", ThisKey="CustomerId", OtherKey="CustomerId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceConfigs(DeviceConfig entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_DeviceConfigs(DeviceConfig entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[Table(Name="dbo.DeviceConfig")]
	public partial class DeviceConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DeviceConfigId;
		
		private string _DeviceId;
		
		private string _ApplicationName;
		
		private string _ApplicationWebServiceURL;
		
		private string _ApplicationReplicationWebServiceURL;
		
		private string _ClientConfigWebServiceURL;
		
		private System.Nullable<System.DateTime> _LicenseExpiryDate;
		
		private System.Nullable<System.DateTime> _LastConnectionDate;
		
		private System.Nullable<long> _ActionCount;
		
		private bool _NotifyOnInactivity;
		
		private System.Guid _CustomerId;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<DeviceConfigAction> _DeviceConfigActions;
		
		private EntitySet<DeviceConfigAplex> _DeviceConfigAplexes;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeviceConfigIdChanging(System.Guid value);
    partial void OnDeviceConfigIdChanged();
    partial void OnDeviceIdChanging(string value);
    partial void OnDeviceIdChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnApplicationWebServiceURLChanging(string value);
    partial void OnApplicationWebServiceURLChanged();
    partial void OnApplicationReplicationWebServiceURLChanging(string value);
    partial void OnApplicationReplicationWebServiceURLChanged();
    partial void OnClientConfigWebServiceURLChanging(string value);
    partial void OnClientConfigWebServiceURLChanged();
    partial void OnLicenseExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLicenseExpiryDateChanged();
    partial void OnLastConnectionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastConnectionDateChanged();
    partial void OnActionCountChanging(System.Nullable<long> value);
    partial void OnActionCountChanged();
    partial void OnNotifyOnInactivityChanging(bool value);
    partial void OnNotifyOnInactivityChanged();
    partial void OnCustomerIdChanging(System.Guid value);
    partial void OnCustomerIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public DeviceConfig()
		{
			this._DeviceConfigActions = new EntitySet<DeviceConfigAction>(new Action<DeviceConfigAction>(this.attach_DeviceConfigActions), new Action<DeviceConfigAction>(this.detach_DeviceConfigActions));
			this._DeviceConfigAplexes = new EntitySet<DeviceConfigAplex>(new Action<DeviceConfigAplex>(this.attach_DeviceConfigAplexes), new Action<DeviceConfigAplex>(this.detach_DeviceConfigAplexes));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_DeviceConfigId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DeviceConfigId
		{
			get
			{
				return this._DeviceConfigId;
			}
			set
			{
				if ((this._DeviceConfigId != value))
				{
					this.OnDeviceConfigIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceConfigId = value;
					this.SendPropertyChanged("DeviceConfigId");
					this.OnDeviceConfigIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceId", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string DeviceId
		{
			get
			{
				return this._DeviceId;
			}
			set
			{
				if ((this._DeviceId != value))
				{
					this.OnDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceId = value;
					this.SendPropertyChanged("DeviceId");
					this.OnDeviceIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationWebServiceURL", DbType="VarChar(500)")]
		public string ApplicationWebServiceURL
		{
			get
			{
				return this._ApplicationWebServiceURL;
			}
			set
			{
				if ((this._ApplicationWebServiceURL != value))
				{
					this.OnApplicationWebServiceURLChanging(value);
					this.SendPropertyChanging();
					this._ApplicationWebServiceURL = value;
					this.SendPropertyChanged("ApplicationWebServiceURL");
					this.OnApplicationWebServiceURLChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationReplicationWebServiceURL", DbType="VarChar(500)")]
		public string ApplicationReplicationWebServiceURL
		{
			get
			{
				return this._ApplicationReplicationWebServiceURL;
			}
			set
			{
				if ((this._ApplicationReplicationWebServiceURL != value))
				{
					this.OnApplicationReplicationWebServiceURLChanging(value);
					this.SendPropertyChanging();
					this._ApplicationReplicationWebServiceURL = value;
					this.SendPropertyChanged("ApplicationReplicationWebServiceURL");
					this.OnApplicationReplicationWebServiceURLChanged();
				}
			}
		}
		
		[Column(Storage="_ClientConfigWebServiceURL", DbType="VarChar(500)")]
		public string ClientConfigWebServiceURL
		{
			get
			{
				return this._ClientConfigWebServiceURL;
			}
			set
			{
				if ((this._ClientConfigWebServiceURL != value))
				{
					this.OnClientConfigWebServiceURLChanging(value);
					this.SendPropertyChanging();
					this._ClientConfigWebServiceURL = value;
					this.SendPropertyChanged("ClientConfigWebServiceURL");
					this.OnClientConfigWebServiceURLChanged();
				}
			}
		}
		
		[Column(Storage="_LicenseExpiryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LicenseExpiryDate
		{
			get
			{
				return this._LicenseExpiryDate;
			}
			set
			{
				if ((this._LicenseExpiryDate != value))
				{
					this.OnLicenseExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._LicenseExpiryDate = value;
					this.SendPropertyChanged("LicenseExpiryDate");
					this.OnLicenseExpiryDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastConnectionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastConnectionDate
		{
			get
			{
				return this._LastConnectionDate;
			}
			set
			{
				if ((this._LastConnectionDate != value))
				{
					this.OnLastConnectionDateChanging(value);
					this.SendPropertyChanging();
					this._LastConnectionDate = value;
					this.SendPropertyChanged("LastConnectionDate");
					this.OnLastConnectionDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionCount", DbType="BigInt")]
		public System.Nullable<long> ActionCount
		{
			get
			{
				return this._ActionCount;
			}
			set
			{
				if ((this._ActionCount != value))
				{
					this.OnActionCountChanging(value);
					this.SendPropertyChanging();
					this._ActionCount = value;
					this.SendPropertyChanged("ActionCount");
					this.OnActionCountChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyOnInactivity", DbType="Bit NOT NULL")]
		public bool NotifyOnInactivity
		{
			get
			{
				return this._NotifyOnInactivity;
			}
			set
			{
				if ((this._NotifyOnInactivity != value))
				{
					this.OnNotifyOnInactivityChanging(value);
					this.SendPropertyChanging();
					this._NotifyOnInactivity = value;
					this.SendPropertyChanged("NotifyOnInactivity");
					this.OnNotifyOnInactivityChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="DeviceConfig_DeviceConfigAction", Storage="_DeviceConfigActions", ThisKey="DeviceConfigId", OtherKey="DeviceConfigId")]
		public EntitySet<DeviceConfigAction> DeviceConfigActions
		{
			get
			{
				return this._DeviceConfigActions;
			}
			set
			{
				this._DeviceConfigActions.Assign(value);
			}
		}
		
		[Association(Name="DeviceConfig_DeviceConfigAplex", Storage="_DeviceConfigAplexes", ThisKey="DeviceConfigId", OtherKey="DeviceConfigId")]
		public EntitySet<DeviceConfigAplex> DeviceConfigAplexes
		{
			get
			{
				return this._DeviceConfigAplexes;
			}
			set
			{
				this._DeviceConfigAplexes.Assign(value);
			}
		}
		
		[Association(Name="Customer_DeviceConfig", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.DeviceConfigs.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.DeviceConfigs.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceConfigActions(DeviceConfigAction entity)
		{
			this.SendPropertyChanging();
			entity.DeviceConfig = this;
		}
		
		private void detach_DeviceConfigActions(DeviceConfigAction entity)
		{
			this.SendPropertyChanging();
			entity.DeviceConfig = null;
		}
		
		private void attach_DeviceConfigAplexes(DeviceConfigAplex entity)
		{
			this.SendPropertyChanging();
			entity.DeviceConfig = this;
		}
		
		private void detach_DeviceConfigAplexes(DeviceConfigAplex entity)
		{
			this.SendPropertyChanging();
			entity.DeviceConfig = null;
		}
	}
	
	[Table(Name="dbo.DeviceConfigAction")]
	public partial class DeviceConfigAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DeviceConfigActionId;
		
		private System.DateTime _DateCreated;
		
		private string _Function;
		
		private string _DeviceId;
		
		private string _ApplicationName;
		
		private string _CustomerCompanyName;
		
		private string _Tag;
		
		private System.Nullable<System.Guid> _DeviceConfigId;
		
		private EntityRef<DeviceConfig> _DeviceConfig;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeviceConfigActionIdChanging(System.Guid value);
    partial void OnDeviceConfigActionIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnFunctionChanging(string value);
    partial void OnFunctionChanged();
    partial void OnDeviceIdChanging(string value);
    partial void OnDeviceIdChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnCustomerCompanyNameChanging(string value);
    partial void OnCustomerCompanyNameChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnDeviceConfigIdChanging(System.Nullable<System.Guid> value);
    partial void OnDeviceConfigIdChanged();
    #endregion
		
		public DeviceConfigAction()
		{
			this._DeviceConfig = default(EntityRef<DeviceConfig>);
			OnCreated();
		}
		
		[Column(Storage="_DeviceConfigActionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DeviceConfigActionId
		{
			get
			{
				return this._DeviceConfigActionId;
			}
			set
			{
				if ((this._DeviceConfigActionId != value))
				{
					this.OnDeviceConfigActionIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceConfigActionId = value;
					this.SendPropertyChanged("DeviceConfigActionId");
					this.OnDeviceConfigActionIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Name="[Function]", Storage="_Function", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Function
		{
			get
			{
				return this._Function;
			}
			set
			{
				if ((this._Function != value))
				{
					this.OnFunctionChanging(value);
					this.SendPropertyChanging();
					this._Function = value;
					this.SendPropertyChanged("Function");
					this.OnFunctionChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceId", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string DeviceId
		{
			get
			{
				return this._DeviceId;
			}
			set
			{
				if ((this._DeviceId != value))
				{
					this.OnDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceId = value;
					this.SendPropertyChanged("DeviceId");
					this.OnDeviceIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerCompanyName", DbType="VarChar(100)")]
		public string CustomerCompanyName
		{
			get
			{
				return this._CustomerCompanyName;
			}
			set
			{
				if ((this._CustomerCompanyName != value))
				{
					this.OnCustomerCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerCompanyName = value;
					this.SendPropertyChanged("CustomerCompanyName");
					this.OnCustomerCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="VarChar(MAX)")]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceConfigId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeviceConfigId
		{
			get
			{
				return this._DeviceConfigId;
			}
			set
			{
				if ((this._DeviceConfigId != value))
				{
					if (this._DeviceConfig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceConfigIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceConfigId = value;
					this.SendPropertyChanged("DeviceConfigId");
					this.OnDeviceConfigIdChanged();
				}
			}
		}
		
		[Association(Name="DeviceConfig_DeviceConfigAction", Storage="_DeviceConfig", ThisKey="DeviceConfigId", OtherKey="DeviceConfigId", IsForeignKey=true, DeleteRule="SET NULL")]
		internal DeviceConfig DeviceConfig
		{
			get
			{
				return this._DeviceConfig.Entity;
			}
			set
			{
				DeviceConfig previousValue = this._DeviceConfig.Entity;
				if (((previousValue != value) 
							|| (this._DeviceConfig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceConfig.Entity = null;
						previousValue.DeviceConfigActions.Remove(this);
					}
					this._DeviceConfig.Entity = value;
					if ((value != null))
					{
						value.DeviceConfigActions.Add(this);
						this._DeviceConfigId = value.DeviceConfigId;
					}
					else
					{
						this._DeviceConfigId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DeviceConfig");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DeviceConfigAplex")]
	public partial class DeviceConfigAplex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DeviceConfigAplexId;
		
		private System.Guid _DeviceConfigId;
		
		private System.Guid _AplexId;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<Aplex> _Aplex;
		
		private EntityRef<DeviceConfig> _DeviceConfig;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeviceConfigAplexIdChanging(System.Guid value);
    partial void OnDeviceConfigAplexIdChanged();
    partial void OnDeviceConfigIdChanging(System.Guid value);
    partial void OnDeviceConfigIdChanged();
    partial void OnAplexIdChanging(System.Guid value);
    partial void OnAplexIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public DeviceConfigAplex()
		{
			this._Aplex = default(EntityRef<Aplex>);
			this._DeviceConfig = default(EntityRef<DeviceConfig>);
			OnCreated();
		}
		
		[Column(Storage="_DeviceConfigAplexId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DeviceConfigAplexId
		{
			get
			{
				return this._DeviceConfigAplexId;
			}
			set
			{
				if ((this._DeviceConfigAplexId != value))
				{
					this.OnDeviceConfigAplexIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceConfigAplexId = value;
					this.SendPropertyChanged("DeviceConfigAplexId");
					this.OnDeviceConfigAplexIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceConfigId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DeviceConfigId
		{
			get
			{
				return this._DeviceConfigId;
			}
			set
			{
				if ((this._DeviceConfigId != value))
				{
					if (this._DeviceConfig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceConfigIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceConfigId = value;
					this.SendPropertyChanged("DeviceConfigId");
					this.OnDeviceConfigIdChanged();
				}
			}
		}
		
		[Column(Storage="_AplexId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AplexId
		{
			get
			{
				return this._AplexId;
			}
			set
			{
				if ((this._AplexId != value))
				{
					if (this._Aplex.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAplexIdChanging(value);
					this.SendPropertyChanging();
					this._AplexId = value;
					this.SendPropertyChanged("AplexId");
					this.OnAplexIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="Aplex_DeviceConfigAplex", Storage="_Aplex", ThisKey="AplexId", OtherKey="AplexId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal Aplex Aplex
		{
			get
			{
				return this._Aplex.Entity;
			}
			set
			{
				Aplex previousValue = this._Aplex.Entity;
				if (((previousValue != value) 
							|| (this._Aplex.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Aplex.Entity = null;
						previousValue.DeviceConfigAplexes.Remove(this);
					}
					this._Aplex.Entity = value;
					if ((value != null))
					{
						value.DeviceConfigAplexes.Add(this);
						this._AplexId = value.AplexId;
					}
					else
					{
						this._AplexId = default(System.Guid);
					}
					this.SendPropertyChanged("Aplex");
				}
			}
		}
		
		[Association(Name="DeviceConfig_DeviceConfigAplex", Storage="_DeviceConfig", ThisKey="DeviceConfigId", OtherKey="DeviceConfigId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal DeviceConfig DeviceConfig
		{
			get
			{
				return this._DeviceConfig.Entity;
			}
			set
			{
				DeviceConfig previousValue = this._DeviceConfig.Entity;
				if (((previousValue != value) 
							|| (this._DeviceConfig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceConfig.Entity = null;
						previousValue.DeviceConfigAplexes.Remove(this);
					}
					this._DeviceConfig.Entity = value;
					if ((value != null))
					{
						value.DeviceConfigAplexes.Add(this);
						this._DeviceConfigId = value.DeviceConfigId;
					}
					else
					{
						this._DeviceConfigId = default(System.Guid);
					}
					this.SendPropertyChanged("DeviceConfig");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DevicePendingApproval")]
	public partial class DevicePendingApproval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DevicePendingApprovalId;
		
		private string _DeviceId;
		
		private string _ApplicationName;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _LatestAttemptDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDevicePendingApprovalIdChanging(System.Guid value);
    partial void OnDevicePendingApprovalIdChanged();
    partial void OnDeviceIdChanging(string value);
    partial void OnDeviceIdChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnLatestAttemptDateChanging(System.DateTime value);
    partial void OnLatestAttemptDateChanged();
    #endregion
		
		public DevicePendingApproval()
		{
			OnCreated();
		}
		
		[Column(Storage="_DevicePendingApprovalId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DevicePendingApprovalId
		{
			get
			{
				return this._DevicePendingApprovalId;
			}
			set
			{
				if ((this._DevicePendingApprovalId != value))
				{
					this.OnDevicePendingApprovalIdChanging(value);
					this.SendPropertyChanging();
					this._DevicePendingApprovalId = value;
					this.SendPropertyChanged("DevicePendingApprovalId");
					this.OnDevicePendingApprovalIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceId", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string DeviceId
		{
			get
			{
				return this._DeviceId;
			}
			set
			{
				if ((this._DeviceId != value))
				{
					this.OnDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceId = value;
					this.SendPropertyChanged("DeviceId");
					this.OnDeviceIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_LatestAttemptDate", DbType="DateTime NOT NULL")]
		public System.DateTime LatestAttemptDate
		{
			get
			{
				return this._LatestAttemptDate;
			}
			set
			{
				if ((this._LatestAttemptDate != value))
				{
					this.OnLatestAttemptDateChanging(value);
					this.SendPropertyChanging();
					this._LatestAttemptDate = value;
					this.SendPropertyChanged("LatestAttemptDate");
					this.OnLatestAttemptDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EmailAction")]
	public partial class EmailAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EmailActionId;
		
		private string _ToEmailAddress;
		
		private string _FromEmailAddress;
		
		private string _Subject;
		
		private string _Body;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailActionIdChanging(System.Guid value);
    partial void OnEmailActionIdChanged();
    partial void OnToEmailAddressChanging(string value);
    partial void OnToEmailAddressChanged();
    partial void OnFromEmailAddressChanging(string value);
    partial void OnFromEmailAddressChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public EmailAction()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EmailActionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EmailActionId
		{
			get
			{
				return this._EmailActionId;
			}
			set
			{
				if ((this._EmailActionId != value))
				{
					this.OnEmailActionIdChanging(value);
					this.SendPropertyChanging();
					this._EmailActionId = value;
					this.SendPropertyChanged("EmailActionId");
					this.OnEmailActionIdChanged();
				}
			}
		}
		
		[Column(Storage="_ToEmailAddress", DbType="VarChar(250)")]
		public string ToEmailAddress
		{
			get
			{
				return this._ToEmailAddress;
			}
			set
			{
				if ((this._ToEmailAddress != value))
				{
					this.OnToEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._ToEmailAddress = value;
					this.SendPropertyChanged("ToEmailAddress");
					this.OnToEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_FromEmailAddress", DbType="VarChar(250)")]
		public string FromEmailAddress
		{
			get
			{
				return this._FromEmailAddress;
			}
			set
			{
				if ((this._FromEmailAddress != value))
				{
					this.OnFromEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._FromEmailAddress = value;
					this.SendPropertyChanged("FromEmailAddress");
					this.OnFromEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="VarChar(MAX)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(MAX)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="User_EmailAction", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteRule="SET NULL")]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EmailActions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EmailActions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GlobalVariable")]
	public partial class GlobalVariable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GlobalVariableId;
		
		private string _VariableName;
		
		private string _VariableValue;
		
		private System.DateTime _DateCreated;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGlobalVariableIdChanging(System.Guid value);
    partial void OnGlobalVariableIdChanged();
    partial void OnVariableNameChanging(string value);
    partial void OnVariableNameChanged();
    partial void OnVariableValueChanging(string value);
    partial void OnVariableValueChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public GlobalVariable()
		{
			OnCreated();
		}
		
		[Column(Storage="_GlobalVariableId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GlobalVariableId
		{
			get
			{
				return this._GlobalVariableId;
			}
			set
			{
				if ((this._GlobalVariableId != value))
				{
					this.OnGlobalVariableIdChanging(value);
					this.SendPropertyChanging();
					this._GlobalVariableId = value;
					this.SendPropertyChanged("GlobalVariableId");
					this.OnGlobalVariableIdChanged();
				}
			}
		}
		
		[Column(Storage="_VariableName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string VariableName
		{
			get
			{
				return this._VariableName;
			}
			set
			{
				if ((this._VariableName != value))
				{
					this.OnVariableNameChanging(value);
					this.SendPropertyChanging();
					this._VariableName = value;
					this.SendPropertyChanged("VariableName");
					this.OnVariableNameChanged();
				}
			}
		}
		
		[Column(Storage="_VariableValue", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VariableValue
		{
			get
			{
				return this._VariableValue;
			}
			set
			{
				if ((this._VariableValue != value))
				{
					this.OnVariableValueChanging(value);
					this.SendPropertyChanging();
					this._VariableValue = value;
					this.SendPropertyChanged("VariableValue");
					this.OnVariableValueChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ServerAction")]
	public partial class ServerAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServerActionId;
		
		private System.DateTime _DateCreated;
		
		private string _Function;
		
		private System.Nullable<System.Guid> _UserId;
		
		private string _UserName;
		
		private string _EntityChanged;
		
		private string _FieldChanged;
		
		private string _OriginalValue;
		
		private string _NewValue;
		
		private string _Comments;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerActionIdChanging(int value);
    partial void OnServerActionIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnFunctionChanging(string value);
    partial void OnFunctionChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEntityChangedChanging(string value);
    partial void OnEntityChangedChanged();
    partial void OnFieldChangedChanging(string value);
    partial void OnFieldChangedChanged();
    partial void OnOriginalValueChanging(string value);
    partial void OnOriginalValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public ServerAction()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ServerActionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServerActionId
		{
			get
			{
				return this._ServerActionId;
			}
			set
			{
				if ((this._ServerActionId != value))
				{
					this.OnServerActionIdChanging(value);
					this.SendPropertyChanging();
					this._ServerActionId = value;
					this.SendPropertyChanged("ServerActionId");
					this.OnServerActionIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Name="[Function]", Storage="_Function", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Function
		{
			get
			{
				return this._Function;
			}
			set
			{
				if ((this._Function != value))
				{
					this.OnFunctionChanging(value);
					this.SendPropertyChanging();
					this._Function = value;
					this.SendPropertyChanged("Function");
					this.OnFunctionChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_EntityChanged", DbType="VarChar(50)")]
		public string EntityChanged
		{
			get
			{
				return this._EntityChanged;
			}
			set
			{
				if ((this._EntityChanged != value))
				{
					this.OnEntityChangedChanging(value);
					this.SendPropertyChanging();
					this._EntityChanged = value;
					this.SendPropertyChanged("EntityChanged");
					this.OnEntityChangedChanged();
				}
			}
		}
		
		[Column(Storage="_FieldChanged", DbType="VarChar(50)")]
		public string FieldChanged
		{
			get
			{
				return this._FieldChanged;
			}
			set
			{
				if ((this._FieldChanged != value))
				{
					this.OnFieldChangedChanging(value);
					this.SendPropertyChanging();
					this._FieldChanged = value;
					this.SendPropertyChanged("FieldChanged");
					this.OnFieldChangedChanged();
				}
			}
		}
		
		[Column(Storage="_OriginalValue", DbType="VarChar(250)")]
		public string OriginalValue
		{
			get
			{
				return this._OriginalValue;
			}
			set
			{
				if ((this._OriginalValue != value))
				{
					this.OnOriginalValueChanging(value);
					this.SendPropertyChanging();
					this._OriginalValue = value;
					this.SendPropertyChanged("OriginalValue");
					this.OnOriginalValueChanged();
				}
			}
		}
		
		[Column(Storage="_NewValue", DbType="VarChar(250)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="VarChar(250)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="User_ServerAction", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteRule="SET NULL")]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ServerActions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ServerActions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ServerError")]
	public partial class ServerError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServerErrorId;
		
		private System.DateTime _DateCreated;
		
		private string _ErrorMessage;
		
		private System.Nullable<System.Guid> _UserId;
		
		private string _UserName;
		
		private string _Comments;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerErrorIdChanging(int value);
    partial void OnServerErrorIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public ServerError()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ServerErrorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServerErrorId
		{
			get
			{
				return this._ServerErrorId;
			}
			set
			{
				if ((this._ServerErrorId != value))
				{
					this.OnServerErrorIdChanging(value);
					this.SendPropertyChanging();
					this._ServerErrorId = value;
					this.SendPropertyChanged("ServerErrorId");
					this.OnServerErrorIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorMessage", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="VarChar(250)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="User_ServerError", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteRule="SET NULL")]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ServerErrors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ServerErrors.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _Password;
		
		private int _RoleId;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Email;
		
		private string _Address;
		
		private System.DateTime _DateCreated;
		
		private string _Phone;
		
		private bool _EmailNotifications;
		
		private System.Nullable<System.Guid> _CustomerId;
		
		private EntitySet<UserPermission> _UserPermissions;
		
		private EntitySet<EmailAction> _EmailActions;
		
		private EntitySet<ServerAction> _ServerActions;
		
		private EntitySet<ServerError> _ServerErrors;
		
		private EntitySet<AplexDataCell> _AplexDataCells;
		
		private EntitySet<AplexDataCell> _AplexDataCells1;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailNotificationsChanging(bool value);
    partial void OnEmailNotificationsChanged();
    partial void OnCustomerIdChanging(System.Nullable<System.Guid> value);
    partial void OnCustomerIdChanged();
    #endregion
		
		public User()
		{
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			this._EmailActions = new EntitySet<EmailAction>(new Action<EmailAction>(this.attach_EmailActions), new Action<EmailAction>(this.detach_EmailActions));
			this._ServerActions = new EntitySet<ServerAction>(new Action<ServerAction>(this.attach_ServerActions), new Action<ServerAction>(this.detach_ServerActions));
			this._ServerErrors = new EntitySet<ServerError>(new Action<ServerError>(this.attach_ServerErrors), new Action<ServerError>(this.detach_ServerErrors));
			this._AplexDataCells = new EntitySet<AplexDataCell>(new Action<AplexDataCell>(this.attach_AplexDataCells), new Action<AplexDataCell>(this.detach_AplexDataCells));
			this._AplexDataCells1 = new EntitySet<AplexDataCell>(new Action<AplexDataCell>(this.attach_AplexDataCells1), new Action<AplexDataCell>(this.detach_AplexDataCells1));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Surname", DbType="VarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(250)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_EmailNotifications", DbType="Bit NOT NULL")]
		public bool EmailNotifications
		{
			get
			{
				return this._EmailNotifications;
			}
			set
			{
				if ((this._EmailNotifications != value))
				{
					this.OnEmailNotificationsChanging(value);
					this.SendPropertyChanging();
					this._EmailNotifications = value;
					this.SendPropertyChanged("EmailNotifications");
					this.OnEmailNotificationsChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Association(Name="User_UserPermission", Storage="_UserPermissions", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		[Association(Name="User_EmailAction", Storage="_EmailActions", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<EmailAction> EmailActions
		{
			get
			{
				return this._EmailActions;
			}
			set
			{
				this._EmailActions.Assign(value);
			}
		}
		
		[Association(Name="User_ServerAction", Storage="_ServerActions", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ServerAction> ServerActions
		{
			get
			{
				return this._ServerActions;
			}
			set
			{
				this._ServerActions.Assign(value);
			}
		}
		
		[Association(Name="User_ServerError", Storage="_ServerErrors", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ServerError> ServerErrors
		{
			get
			{
				return this._ServerErrors;
			}
			set
			{
				this._ServerErrors.Assign(value);
			}
		}
		
		[Association(Name="User_AplexDataCell", Storage="_AplexDataCells", ThisKey="UserId", OtherKey="CreatedByUserId")]
		public EntitySet<AplexDataCell> AplexDataCells
		{
			get
			{
				return this._AplexDataCells;
			}
			set
			{
				this._AplexDataCells.Assign(value);
			}
		}
		
		[Association(Name="User_AplexDataCell1", Storage="_AplexDataCells1", ThisKey="UserId", OtherKey="UpdateByUserId")]
		public EntitySet<AplexDataCell> AplexDataCells1
		{
			get
			{
				return this._AplexDataCells1;
			}
			set
			{
				this._AplexDataCells1.Assign(value);
			}
		}
		
		[Association(Name="Customer_User", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true, DeleteRule="SET NULL")]
		internal Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EmailActions(EmailAction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EmailActions(EmailAction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ServerActions(ServerAction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ServerActions(ServerAction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ServerErrors(ServerError entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ServerErrors(ServerError entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AplexDataCells(AplexDataCell entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AplexDataCells(AplexDataCell entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AplexDataCells1(AplexDataCell entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_AplexDataCells1(AplexDataCell entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[Table(Name="dbo.AplexDatabase")]
	public partial class AplexDatabase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AplexDatabaseId;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<AplexDataTable> _AplexDataTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAplexDatabaseIdChanging(System.Guid value);
    partial void OnAplexDatabaseIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AplexDatabase()
		{
			this._AplexDataTables = new EntitySet<AplexDataTable>(new Action<AplexDataTable>(this.attach_AplexDataTables), new Action<AplexDataTable>(this.detach_AplexDataTables));
			OnCreated();
		}
		
		[Column(Storage="_AplexDatabaseId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AplexDatabaseId
		{
			get
			{
				return this._AplexDatabaseId;
			}
			set
			{
				if ((this._AplexDatabaseId != value))
				{
					this.OnAplexDatabaseIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDatabaseId = value;
					this.SendPropertyChanged("AplexDatabaseId");
					this.OnAplexDatabaseIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="AplexDatabase_AplexDataTable", Storage="_AplexDataTables", ThisKey="AplexDatabaseId", OtherKey="AplexDatabaseId")]
		public EntitySet<AplexDataTable> AplexDataTables
		{
			get
			{
				return this._AplexDataTables;
			}
			set
			{
				this._AplexDataTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AplexDataTables(AplexDataTable entity)
		{
			this.SendPropertyChanging();
			entity.AplexDatabase = this;
		}
		
		private void detach_AplexDataTables(AplexDataTable entity)
		{
			this.SendPropertyChanging();
			entity.AplexDatabase = null;
		}
	}
	
	[Table(Name="dbo.AplexScreen")]
	public partial class AplexScreen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AplexScreenId;
		
		private string _Name;
		
		private int _OperationType;
		
		private System.Guid _AplexId;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<AplexScreenField> _AplexScreenFields;
		
		private EntityRef<Aplex> _Aplex;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAplexScreenIdChanging(System.Guid value);
    partial void OnAplexScreenIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOperationTypeChanging(int value);
    partial void OnOperationTypeChanged();
    partial void OnAplexIdChanging(System.Guid value);
    partial void OnAplexIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AplexScreen()
		{
			this._AplexScreenFields = new EntitySet<AplexScreenField>(new Action<AplexScreenField>(this.attach_AplexScreenFields), new Action<AplexScreenField>(this.detach_AplexScreenFields));
			this._Aplex = default(EntityRef<Aplex>);
			OnCreated();
		}
		
		[Column(Storage="_AplexScreenId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AplexScreenId
		{
			get
			{
				return this._AplexScreenId;
			}
			set
			{
				if ((this._AplexScreenId != value))
				{
					this.OnAplexScreenIdChanging(value);
					this.SendPropertyChanging();
					this._AplexScreenId = value;
					this.SendPropertyChanged("AplexScreenId");
					this.OnAplexScreenIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_OperationType", DbType="Int NOT NULL")]
		public int OperationType
		{
			get
			{
				return this._OperationType;
			}
			set
			{
				if ((this._OperationType != value))
				{
					this.OnOperationTypeChanging(value);
					this.SendPropertyChanging();
					this._OperationType = value;
					this.SendPropertyChanged("OperationType");
					this.OnOperationTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AplexId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AplexId
		{
			get
			{
				return this._AplexId;
			}
			set
			{
				if ((this._AplexId != value))
				{
					if (this._Aplex.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAplexIdChanging(value);
					this.SendPropertyChanging();
					this._AplexId = value;
					this.SendPropertyChanged("AplexId");
					this.OnAplexIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="AplexScreen_AplexScreenField", Storage="_AplexScreenFields", ThisKey="AplexScreenId", OtherKey="AplexScreenId")]
		public EntitySet<AplexScreenField> AplexScreenFields
		{
			get
			{
				return this._AplexScreenFields;
			}
			set
			{
				this._AplexScreenFields.Assign(value);
			}
		}
		
		[Association(Name="Aplex_AplexScreen", Storage="_Aplex", ThisKey="AplexId", OtherKey="AplexId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal Aplex Aplex
		{
			get
			{
				return this._Aplex.Entity;
			}
			set
			{
				Aplex previousValue = this._Aplex.Entity;
				if (((previousValue != value) 
							|| (this._Aplex.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Aplex.Entity = null;
						previousValue.AplexScreens.Remove(this);
					}
					this._Aplex.Entity = value;
					if ((value != null))
					{
						value.AplexScreens.Add(this);
						this._AplexId = value.AplexId;
					}
					else
					{
						this._AplexId = default(System.Guid);
					}
					this.SendPropertyChanged("Aplex");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AplexScreenFields(AplexScreenField entity)
		{
			this.SendPropertyChanging();
			entity.AplexScreen = this;
		}
		
		private void detach_AplexScreenFields(AplexScreenField entity)
		{
			this.SendPropertyChanging();
			entity.AplexScreen = null;
		}
	}
	
	[Table(Name="dbo.AplexScreenField")]
	public partial class AplexScreenField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AplexScreenFieldId;
		
		private string _Name;
		
		private string _DisplayName;
		
		private bool _Mandatory;
		
		private object _Value;
		
		private string _ValueTypeName;
		
		private System.Guid _AplexScreenId;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<AplexScreen> _AplexScreen;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAplexScreenFieldIdChanging(System.Guid value);
    partial void OnAplexScreenFieldIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnMandatoryChanging(bool value);
    partial void OnMandatoryChanged();
    partial void OnValueChanging(object value);
    partial void OnValueChanged();
    partial void OnValueTypeNameChanging(string value);
    partial void OnValueTypeNameChanged();
    partial void OnAplexScreenIdChanging(System.Guid value);
    partial void OnAplexScreenIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AplexScreenField()
		{
			this._AplexScreen = default(EntityRef<AplexScreen>);
			OnCreated();
		}
		
		[Column(Storage="_AplexScreenFieldId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AplexScreenFieldId
		{
			get
			{
				return this._AplexScreenFieldId;
			}
			set
			{
				if ((this._AplexScreenFieldId != value))
				{
					this.OnAplexScreenFieldIdChanging(value);
					this.SendPropertyChanging();
					this._AplexScreenFieldId = value;
					this.SendPropertyChanged("AplexScreenFieldId");
					this.OnAplexScreenFieldIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_Mandatory", DbType="Bit NOT NULL")]
		public bool Mandatory
		{
			get
			{
				return this._Mandatory;
			}
			set
			{
				if ((this._Mandatory != value))
				{
					this.OnMandatoryChanging(value);
					this.SendPropertyChanging();
					this._Mandatory = value;
					this.SendPropertyChanged("Mandatory");
					this.OnMandatoryChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Variant", UpdateCheck=UpdateCheck.Never)]
		public object Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_ValueTypeName", DbType="VarChar(MAX)")]
		public string ValueTypeName
		{
			get
			{
				return this._ValueTypeName;
			}
			set
			{
				if ((this._ValueTypeName != value))
				{
					this.OnValueTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ValueTypeName = value;
					this.SendPropertyChanged("ValueTypeName");
					this.OnValueTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_AplexScreenId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AplexScreenId
		{
			get
			{
				return this._AplexScreenId;
			}
			set
			{
				if ((this._AplexScreenId != value))
				{
					if (this._AplexScreen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAplexScreenIdChanging(value);
					this.SendPropertyChanging();
					this._AplexScreenId = value;
					this.SendPropertyChanged("AplexScreenId");
					this.OnAplexScreenIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="AplexScreen_AplexScreenField", Storage="_AplexScreen", ThisKey="AplexScreenId", OtherKey="AplexScreenId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal AplexScreen AplexScreen
		{
			get
			{
				return this._AplexScreen.Entity;
			}
			set
			{
				AplexScreen previousValue = this._AplexScreen.Entity;
				if (((previousValue != value) 
							|| (this._AplexScreen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AplexScreen.Entity = null;
						previousValue.AplexScreenFields.Remove(this);
					}
					this._AplexScreen.Entity = value;
					if ((value != null))
					{
						value.AplexScreenFields.Add(this);
						this._AplexScreenId = value.AplexScreenId;
					}
					else
					{
						this._AplexScreenId = default(System.Guid);
					}
					this.SendPropertyChanged("AplexScreen");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AplexDataColumn")]
	public partial class AplexDataColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AplexDataColumnId;
		
		private string _Name;
		
		private string _ValueTypeName;
		
		private System.Guid _AplexDataTableId;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<AplexDataCell> _AplexDataCells;
		
		private EntityRef<AplexDataTable> _AplexDataTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAplexDataColumnIdChanging(System.Guid value);
    partial void OnAplexDataColumnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueTypeNameChanging(string value);
    partial void OnValueTypeNameChanged();
    partial void OnAplexDataTableIdChanging(System.Guid value);
    partial void OnAplexDataTableIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AplexDataColumn()
		{
			this._AplexDataCells = new EntitySet<AplexDataCell>(new Action<AplexDataCell>(this.attach_AplexDataCells), new Action<AplexDataCell>(this.detach_AplexDataCells));
			this._AplexDataTable = default(EntityRef<AplexDataTable>);
			OnCreated();
		}
		
		[Column(Storage="_AplexDataColumnId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AplexDataColumnId
		{
			get
			{
				return this._AplexDataColumnId;
			}
			set
			{
				if ((this._AplexDataColumnId != value))
				{
					this.OnAplexDataColumnIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDataColumnId = value;
					this.SendPropertyChanged("AplexDataColumnId");
					this.OnAplexDataColumnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ValueTypeName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ValueTypeName
		{
			get
			{
				return this._ValueTypeName;
			}
			set
			{
				if ((this._ValueTypeName != value))
				{
					this.OnValueTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ValueTypeName = value;
					this.SendPropertyChanged("ValueTypeName");
					this.OnValueTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_AplexDataTableId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AplexDataTableId
		{
			get
			{
				return this._AplexDataTableId;
			}
			set
			{
				if ((this._AplexDataTableId != value))
				{
					if (this._AplexDataTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAplexDataTableIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDataTableId = value;
					this.SendPropertyChanged("AplexDataTableId");
					this.OnAplexDataTableIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="AplexDataColumn_AplexDataCell", Storage="_AplexDataCells", ThisKey="AplexDataColumnId", OtherKey="AplexDataColumnId")]
		public EntitySet<AplexDataCell> AplexDataCells
		{
			get
			{
				return this._AplexDataCells;
			}
			set
			{
				this._AplexDataCells.Assign(value);
			}
		}
		
		[Association(Name="AplexDataTable_AplexDataColumn", Storage="_AplexDataTable", ThisKey="AplexDataTableId", OtherKey="AplexDataTableId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal AplexDataTable AplexDataTable
		{
			get
			{
				return this._AplexDataTable.Entity;
			}
			set
			{
				AplexDataTable previousValue = this._AplexDataTable.Entity;
				if (((previousValue != value) 
							|| (this._AplexDataTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AplexDataTable.Entity = null;
						previousValue.AplexDataColumns.Remove(this);
					}
					this._AplexDataTable.Entity = value;
					if ((value != null))
					{
						value.AplexDataColumns.Add(this);
						this._AplexDataTableId = value.AplexDataTableId;
					}
					else
					{
						this._AplexDataTableId = default(System.Guid);
					}
					this.SendPropertyChanged("AplexDataTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AplexDataCells(AplexDataCell entity)
		{
			this.SendPropertyChanging();
			entity.AplexDataColumn = this;
		}
		
		private void detach_AplexDataCells(AplexDataCell entity)
		{
			this.SendPropertyChanging();
			entity.AplexDataColumn = null;
		}
	}
	
	[Table(Name="dbo.AplexDataRow")]
	public partial class AplexDataRow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AplexDataRowId;
		
		private System.Guid _AplexDataTableId;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<AplexDataCell> _AplexDataCells;
		
		private EntityRef<AplexDataTable> _AplexDataTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAplexDataRowIdChanging(System.Guid value);
    partial void OnAplexDataRowIdChanged();
    partial void OnAplexDataTableIdChanging(System.Guid value);
    partial void OnAplexDataTableIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AplexDataRow()
		{
			this._AplexDataCells = new EntitySet<AplexDataCell>(new Action<AplexDataCell>(this.attach_AplexDataCells), new Action<AplexDataCell>(this.detach_AplexDataCells));
			this._AplexDataTable = default(EntityRef<AplexDataTable>);
			OnCreated();
		}
		
		[Column(Storage="_AplexDataRowId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AplexDataRowId
		{
			get
			{
				return this._AplexDataRowId;
			}
			set
			{
				if ((this._AplexDataRowId != value))
				{
					this.OnAplexDataRowIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDataRowId = value;
					this.SendPropertyChanged("AplexDataRowId");
					this.OnAplexDataRowIdChanged();
				}
			}
		}
		
		[Column(Storage="_AplexDataTableId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AplexDataTableId
		{
			get
			{
				return this._AplexDataTableId;
			}
			set
			{
				if ((this._AplexDataTableId != value))
				{
					if (this._AplexDataTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAplexDataTableIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDataTableId = value;
					this.SendPropertyChanged("AplexDataTableId");
					this.OnAplexDataTableIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="AplexDataRow_AplexDataCell", Storage="_AplexDataCells", ThisKey="AplexDataRowId", OtherKey="AplexDataRowId")]
		public EntitySet<AplexDataCell> AplexDataCells
		{
			get
			{
				return this._AplexDataCells;
			}
			set
			{
				this._AplexDataCells.Assign(value);
			}
		}
		
		[Association(Name="AplexDataTable_AplexDataRow", Storage="_AplexDataTable", ThisKey="AplexDataTableId", OtherKey="AplexDataTableId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal AplexDataTable AplexDataTable
		{
			get
			{
				return this._AplexDataTable.Entity;
			}
			set
			{
				AplexDataTable previousValue = this._AplexDataTable.Entity;
				if (((previousValue != value) 
							|| (this._AplexDataTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AplexDataTable.Entity = null;
						previousValue.AplexDataRows.Remove(this);
					}
					this._AplexDataTable.Entity = value;
					if ((value != null))
					{
						value.AplexDataRows.Add(this);
						this._AplexDataTableId = value.AplexDataTableId;
					}
					else
					{
						this._AplexDataTableId = default(System.Guid);
					}
					this.SendPropertyChanged("AplexDataTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AplexDataCells(AplexDataCell entity)
		{
			this.SendPropertyChanging();
			entity.AplexDataRow = this;
		}
		
		private void detach_AplexDataCells(AplexDataCell entity)
		{
			this.SendPropertyChanging();
			entity.AplexDataRow = null;
		}
	}
	
	[Table(Name="dbo.AplexDataTable")]
	public partial class AplexDataTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AplexDataTableId;
		
		private string _Name;
		
		private string _Description;
		
		private System.Guid _AplexDatabaseId;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<AplexDataColumn> _AplexDataColumns;
		
		private EntitySet<AplexDataRow> _AplexDataRows;
		
		private EntityRef<AplexDatabase> _AplexDatabase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAplexDataTableIdChanging(System.Guid value);
    partial void OnAplexDataTableIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAplexDatabaseIdChanging(System.Guid value);
    partial void OnAplexDatabaseIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AplexDataTable()
		{
			this._AplexDataColumns = new EntitySet<AplexDataColumn>(new Action<AplexDataColumn>(this.attach_AplexDataColumns), new Action<AplexDataColumn>(this.detach_AplexDataColumns));
			this._AplexDataRows = new EntitySet<AplexDataRow>(new Action<AplexDataRow>(this.attach_AplexDataRows), new Action<AplexDataRow>(this.detach_AplexDataRows));
			this._AplexDatabase = default(EntityRef<AplexDatabase>);
			OnCreated();
		}
		
		[Column(Storage="_AplexDataTableId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AplexDataTableId
		{
			get
			{
				return this._AplexDataTableId;
			}
			set
			{
				if ((this._AplexDataTableId != value))
				{
					this.OnAplexDataTableIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDataTableId = value;
					this.SendPropertyChanged("AplexDataTableId");
					this.OnAplexDataTableIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_AplexDatabaseId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AplexDatabaseId
		{
			get
			{
				return this._AplexDatabaseId;
			}
			set
			{
				if ((this._AplexDatabaseId != value))
				{
					if (this._AplexDatabase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAplexDatabaseIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDatabaseId = value;
					this.SendPropertyChanged("AplexDatabaseId");
					this.OnAplexDatabaseIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="AplexDataTable_AplexDataColumn", Storage="_AplexDataColumns", ThisKey="AplexDataTableId", OtherKey="AplexDataTableId")]
		public EntitySet<AplexDataColumn> AplexDataColumns
		{
			get
			{
				return this._AplexDataColumns;
			}
			set
			{
				this._AplexDataColumns.Assign(value);
			}
		}
		
		[Association(Name="AplexDataTable_AplexDataRow", Storage="_AplexDataRows", ThisKey="AplexDataTableId", OtherKey="AplexDataTableId")]
		public EntitySet<AplexDataRow> AplexDataRows
		{
			get
			{
				return this._AplexDataRows;
			}
			set
			{
				this._AplexDataRows.Assign(value);
			}
		}
		
		[Association(Name="AplexDatabase_AplexDataTable", Storage="_AplexDatabase", ThisKey="AplexDatabaseId", OtherKey="AplexDatabaseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal AplexDatabase AplexDatabase
		{
			get
			{
				return this._AplexDatabase.Entity;
			}
			set
			{
				AplexDatabase previousValue = this._AplexDatabase.Entity;
				if (((previousValue != value) 
							|| (this._AplexDatabase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AplexDatabase.Entity = null;
						previousValue.AplexDataTables.Remove(this);
					}
					this._AplexDatabase.Entity = value;
					if ((value != null))
					{
						value.AplexDataTables.Add(this);
						this._AplexDatabaseId = value.AplexDatabaseId;
					}
					else
					{
						this._AplexDatabaseId = default(System.Guid);
					}
					this.SendPropertyChanged("AplexDatabase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AplexDataColumns(AplexDataColumn entity)
		{
			this.SendPropertyChanging();
			entity.AplexDataTable = this;
		}
		
		private void detach_AplexDataColumns(AplexDataColumn entity)
		{
			this.SendPropertyChanging();
			entity.AplexDataTable = null;
		}
		
		private void attach_AplexDataRows(AplexDataRow entity)
		{
			this.SendPropertyChanging();
			entity.AplexDataTable = this;
		}
		
		private void detach_AplexDataRows(AplexDataRow entity)
		{
			this.SendPropertyChanging();
			entity.AplexDataTable = null;
		}
	}
	
	[Table(Name="dbo.AplexDataCell")]
	public partial class AplexDataCell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AplexDataCellId;
		
		private System.Guid _AplexDataColumnId;
		
		private System.Guid _AplexDataRowId;
		
		private object _Value;
		
		private System.Nullable<System.Guid> _UpdateByUserId;
		
		private System.Nullable<System.Guid> _CreatedByUserId;
		
		private string _UpdateByUserName;
		
		private string _CreatedByUserName;
		
		private System.Nullable<System.DateTime> _DateUpdate;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<AplexDataColumn> _AplexDataColumn;
		
		private EntityRef<AplexDataRow> _AplexDataRow;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAplexDataCellIdChanging(System.Guid value);
    partial void OnAplexDataCellIdChanged();
    partial void OnAplexDataColumnIdChanging(System.Guid value);
    partial void OnAplexDataColumnIdChanged();
    partial void OnAplexDataRowIdChanging(System.Guid value);
    partial void OnAplexDataRowIdChanged();
    partial void OnValueChanging(object value);
    partial void OnValueChanged();
    partial void OnUpdateByUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUpdateByUserIdChanged();
    partial void OnCreatedByUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByUserIdChanged();
    partial void OnUpdateByUserNameChanging(string value);
    partial void OnUpdateByUserNameChanged();
    partial void OnCreatedByUserNameChanging(string value);
    partial void OnCreatedByUserNameChanged();
    partial void OnDateUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpdateChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AplexDataCell()
		{
			this._AplexDataColumn = default(EntityRef<AplexDataColumn>);
			this._AplexDataRow = default(EntityRef<AplexDataRow>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_AplexDataCellId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AplexDataCellId
		{
			get
			{
				return this._AplexDataCellId;
			}
			set
			{
				if ((this._AplexDataCellId != value))
				{
					this.OnAplexDataCellIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDataCellId = value;
					this.SendPropertyChanged("AplexDataCellId");
					this.OnAplexDataCellIdChanged();
				}
			}
		}
		
		[Column(Storage="_AplexDataColumnId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AplexDataColumnId
		{
			get
			{
				return this._AplexDataColumnId;
			}
			set
			{
				if ((this._AplexDataColumnId != value))
				{
					if (this._AplexDataColumn.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAplexDataColumnIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDataColumnId = value;
					this.SendPropertyChanged("AplexDataColumnId");
					this.OnAplexDataColumnIdChanged();
				}
			}
		}
		
		[Column(Storage="_AplexDataRowId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AplexDataRowId
		{
			get
			{
				return this._AplexDataRowId;
			}
			set
			{
				if ((this._AplexDataRowId != value))
				{
					if (this._AplexDataRow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAplexDataRowIdChanging(value);
					this.SendPropertyChanging();
					this._AplexDataRowId = value;
					this.SendPropertyChanged("AplexDataRowId");
					this.OnAplexDataRowIdChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Variant", UpdateCheck=UpdateCheck.Never)]
		public object Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateByUserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdateByUserId
		{
			get
			{
				return this._UpdateByUserId;
			}
			set
			{
				if ((this._UpdateByUserId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdateByUserIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateByUserId = value;
					this.SendPropertyChanged("UpdateByUserId");
					this.OnUpdateByUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateByUserName", DbType="VarChar(50)")]
		public string UpdateByUserName
		{
			get
			{
				return this._UpdateByUserName;
			}
			set
			{
				if ((this._UpdateByUserName != value))
				{
					this.OnUpdateByUserNameChanging(value);
					this.SendPropertyChanging();
					this._UpdateByUserName = value;
					this.SendPropertyChanged("UpdateByUserName");
					this.OnUpdateByUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByUserName", DbType="VarChar(50)")]
		public string CreatedByUserName
		{
			get
			{
				return this._CreatedByUserName;
			}
			set
			{
				if ((this._CreatedByUserName != value))
				{
					this.OnCreatedByUserNameChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserName = value;
					this.SendPropertyChanged("CreatedByUserName");
					this.OnCreatedByUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateUpdate
		{
			get
			{
				return this._DateUpdate;
			}
			set
			{
				if ((this._DateUpdate != value))
				{
					this.OnDateUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateUpdate = value;
					this.SendPropertyChanged("DateUpdate");
					this.OnDateUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="AplexDataColumn_AplexDataCell", Storage="_AplexDataColumn", ThisKey="AplexDataColumnId", OtherKey="AplexDataColumnId", IsForeignKey=true)]
		internal AplexDataColumn AplexDataColumn
		{
			get
			{
				return this._AplexDataColumn.Entity;
			}
			set
			{
				AplexDataColumn previousValue = this._AplexDataColumn.Entity;
				if (((previousValue != value) 
							|| (this._AplexDataColumn.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AplexDataColumn.Entity = null;
						previousValue.AplexDataCells.Remove(this);
					}
					this._AplexDataColumn.Entity = value;
					if ((value != null))
					{
						value.AplexDataCells.Add(this);
						this._AplexDataColumnId = value.AplexDataColumnId;
					}
					else
					{
						this._AplexDataColumnId = default(System.Guid);
					}
					this.SendPropertyChanged("AplexDataColumn");
				}
			}
		}
		
		[Association(Name="AplexDataRow_AplexDataCell", Storage="_AplexDataRow", ThisKey="AplexDataRowId", OtherKey="AplexDataRowId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal AplexDataRow AplexDataRow
		{
			get
			{
				return this._AplexDataRow.Entity;
			}
			set
			{
				AplexDataRow previousValue = this._AplexDataRow.Entity;
				if (((previousValue != value) 
							|| (this._AplexDataRow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AplexDataRow.Entity = null;
						previousValue.AplexDataCells.Remove(this);
					}
					this._AplexDataRow.Entity = value;
					if ((value != null))
					{
						value.AplexDataCells.Add(this);
						this._AplexDataRowId = value.AplexDataRowId;
					}
					else
					{
						this._AplexDataRowId = default(System.Guid);
					}
					this.SendPropertyChanged("AplexDataRow");
				}
			}
		}
		
		[Association(Name="User_AplexDataCell", Storage="_User", ThisKey="CreatedByUserId", OtherKey="UserId", IsForeignKey=true)]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AplexDataCells.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AplexDataCells.Add(this);
						this._CreatedByUserId = value.UserId;
					}
					else
					{
						this._CreatedByUserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="User_AplexDataCell1", Storage="_User1", ThisKey="UpdateByUserId", OtherKey="UserId", IsForeignKey=true)]
		internal User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.AplexDataCells1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.AplexDataCells1.Add(this);
						this._UpdateByUserId = value.UserId;
					}
					else
					{
						this._UpdateByUserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
